1584456112666:(def colors [:r :g :b :y :w :p :c :a])\n\n(def random-colors (vec (take 5 (shuffle colors))))\n\n(defn get-inorder-cols [l]\n      (loop [ele-count 4 ordered 0]\n            (if (< ele-count 0)\n              ordered\n              (if (= (random-colors ele-count) (l ele-count)) (recur (dec ele-count) (inc ordered)) (recur (dec ele-count) ordered)))))\n\n(defn get-correct-guess [l]\n      (count (filter (fn [x]\n                         (contains? (set random-colors) x)) l)))\n\n(defn game []\n      (loop [attempts 0]\n            (println random-colors)\n            (println "attempt" attempts)\n            (println "color options" colors)\n            (println "Guess:")\n            (let [user-guess (read-string (read-line)) in-order (get-inorder-cols user-guess) correct-guess (get-correct-guess user-guess)]\n                 (println "correct guess:" correct-guess)\n                 (println "in order:" in-order)\n                 (if (> attempts 12) (println "maximum attempts!!!! Game over!!! your guess:" user-guess) (if (= user-guess random-colors) (println "correct guess!!!! you won!!!" user-guess) (recur (inc attempts)))))))
1584456115750:(game)
